#!/usr/bin/env bash

NEW_EXT=".webm"

[[ ! $(type -P ffmpeg) ]] && echo 'Error: The ffmpeg executable was not found in $PATH' && exit 1

function convert_mp4(){
	# Figure out number of cores
	if [ "$(uname)" == "Darwin" ]; then
		let CORES="$(sysctl -n hw.ncpu)"
	elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
		let CORES="$(nproc)"
	else
		let CORES=1
	fi

	# Check and see if the folder "converting" exists. If it doesn't then we want to create it.
	if [ ! -d "converting" ]; then
		mkdir converting
	fi

	# Move video into converting and change directories
	mv "$1" converting/
	pushd converting

	# Figure out old extension
	OLD_EXT=$(sed 's|^.*\.||' <<< "$1")

	# Convert video
	ffmpeg -i "$1" -c:v libvpx -crf 4 -q:v 10 -b:v "$BITRATE" -c:a libvorbis -threads $CORES "${1/\.${OLD_EXT}}${NEW_EXT}"

	# Check to see if the folder "converted" exists. If it doesn't then we want to create it.
	if [ ! -d "../converted" ]; then
		mkdir ../converted
	fi

	# Check and see if the folder "created" exists. If it doesn't then we want to create it.
	if [ ! -d "../created" ]; then
		mkdir ../created
	fi

	# Move old mp4 files into "converted" folder
	mv "$1" ../converted/

	# Move new webm files into "created" folder
	mv "${1/\.${OLD_EXT}}${NEW_EXT}" ../created/

	# Get out of the converting directory
	popd converting
}

if [ -n "$1" ]; then
	BITRATE="$1"
	shift
else
	echo "Error: the desired bitrate of the resulting video must be passed as the first argument"
	exit 1
fi

if [ -n "$1" ]; then
	for video in "$@"; do
		if [[ -f "$video" ]]; then
			convert_mp4 "$video"
		else
			echo "Error: no video file(s) matching '$video'"
		fi
	done
else
	for video in *.mp4; do
		convert_mp4 "$video"
	done
fi
